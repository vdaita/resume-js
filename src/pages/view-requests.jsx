// export default function ViewRequests(){
//   return (<div></div>)
// }

import React, {useState, useEffect} from 'react';
import Head from 'next/head'
import Image from 'next/image'
import { Inter } from 'next/font/google'
import styles from '@/styles/Home.module.css'
import supabase from '@/utils/supabase.js';
import { Button, ButtonGroup, Textarea, VStack, Input, Heading, Text, Spinner, Card, CardHeader, CardBody, CardFooter, Badge, Link, useToast} from '@chakra-ui/react';
import axios from "axios";

export default function ViewRequests() {
  const [requests, setRequests] = useState([]);

  useEffect(() => {
    // load all the requests with this user's id

  }, []);

  let loadPreviousRequests = async () => {
    let userId = await getUserId();

    let {data, error} = await supabase.from('requests')
      .select()
      .eq('user_id', userId);

    setRequests(data);
  }

  let getUserId = async () => {
    const { data: {user} } = await supabase.auth.getUser();
    return user?.id;
  }


  let processCheckout = async (bucketId) => { // TODO: don't have two different processCheckout methods in seperate files

    const STRIPE_PUBLIC = "pk_test_51Kb55ZK7c7Mb50VzqCqKpw8CKE2OaOaN6dXX9CSFOESTYCO8XzzYAyR3AKfy1T2wdh246mwmWc1xHDW0MxUQej6j00gzQGymvF";


    const res = await fetch("/api/payment", {
      method: "POST",
      body: JSON.stringify({supabaseId: bucketId}),
      headers: new Headers({
        'Content-Type': 'application/json',
        'Accept': 'application/json',
        'Authorization': 'Bearer ' + STRIPE_PUBLIC
      })
    })
    console.log('Fetched session id from backend: ', res);
    if(!res.ok){
      return false;
    }

    const data = await res.json();
    const stripe = await loadStripe(STRIPE_PUBLIC); // process.env.NEXT_PUBLIC_STRIPE_KEY
    const stripeRes = await stripe.redirectToCheckout({sessionId: data.id});

    console.log(stripeRes);
    if(!stripeRes.ok){
      return false;
    }

    return true;

  }

  return (
    <>
      <Head>
        <title>Petform</title>
        <meta name="description" content="Generated by create next app" />
        <meta name="viewport" content="width=device-width, initial-scale=1" />
        <link rel="icon" href="/favicon.ico" />
      </Head>
      <main classType={styles.main}>
        <Heading>petform</Heading>

        <p>Unpaid requests are deleted after 30 days</p>
        {requests.map((item, index) => (
          <Card>
            <p>{item.prompts}</p>
            <p>{item.created_at}</p>

            {item.payment_completed && <Badge colorScheme='green'>Payment completed</Badge>}
            {!item.payment_completed && <Badge colorScheme='red' onPress={() => processCheckout(item.id)}>Payment not completed - tap to complete.</Badge>}
            
            {item.request_completed && <Badge colorScheme='green'>Request fulfilled - check your email.</Badge>}
            {!item.request_completed && <Badge colorScheme="yellow">Request in progress.</Badge>}

            {item.watermarked_free_trial && <Badge colorScheme="orange">Free trial request</Badge>}
          </Card>
        ))}
      </main>
    </>
  )
}
